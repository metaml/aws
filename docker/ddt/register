#!/usr/bin/ruby

require 'rubygems'
require 'net/http'
require 'uri'
require 'json'

module Model
  def Model.node(datacenter, node, address)
    {'Datacenter' => datacenter,
      'Node' => node,
      'Address' => address
    }
  end

  def Model.service(id, service, port)
    {'ID' => id,
      'Service' => service,
      'Port' => port.class == String ? port.to_i : port
    }
  end

  def Model.check(node, check_id, name, notes, status, service_id)
    {'Node' => node,
      'CheckID' => check_id,
      'Name' => name,
      'Notes' => notes,
      'Status' => status,
      'ServiceID' => service_id
    }
  end

  def Model.headers 
    {'Content-Type' => 'application/json',
      'Accept' => 'application/json'
    }
  end

  # array of [iface,ip] 
  def Model.iface_ips
    ds = `netstat --interfaces --protocol=inet --listening|egrep -v '^(Iface|Kernel)'`.each_line.map{|l|l.split[0]}
    devs = ds.nil? || ds.empty? ? [] : ds
    devs.select!{|d| d != 'lo'}
    pairs = devs.map do |dev|
      ipout = `ip -4 addr show dev #{dev}|grep inet`.strip
      next if ipout.nil? || ipout == '' 
      cidr = ipout.split[1]
      ip = cidr.split('/')[0]
      [dev, ip]
    end
    pairs.nil? ? [] : pairs.select{|p|!p.nil?}
  end
  # array of [ip,ports] 
  def Model.ip_ports
    hps = `netstat -n -4 --listening --tcp --udp|egrep -v '^(Active|Proto)'`.each_line.map{|l|l.split[3]}
    hps.map{|l|l.split(':')}.uniq
  end
end

CONSUL = ENV['CONSUL_IP'] + ":8500"
SERVICE = ENV['SERVICE']
DC = ENV['DATACENTER']
URL = URI.parse("http://#{CONSUL}/v1/catalog/register")

def hostname
  if ENV['HOSTNAME'].nil? || ENV['HOSTNAME'] == ''
    `hostname`.strip.downcase
  else
    ENV['HOSTNAME'].strip.downcase
  end
end

def register(ip, port)
  node = Model.node(DC, hostname, ip)
  node['Service'] = Model.service("#{ip}:#{port}", SERVICE, port)
  http = Net::HTTP.new(URL.host, URL.port)
  http.put(URL.path, node.to_json, Model.headers)
end

# main 
[1, 1, 2, 3, 5, 8, 13, 8, 5, 3, 2, 1, 1].each do |sec|
  begin
    ip_port_pairs = Model.ip_ports
    unless ip_port_pairs.empty?
      ip_port_pairs.each do |ipaddr, port|
        if ipaddr == '0.0.0.0'
          Model.iface_ips.each{|dev, ip| p register(ip, port)}
        else
          p register(ipaddr, port)
        end
      end
    else
      Model.iface_ips.map{|e|e.last}.each{|ip| puts register(ip, "-")}
    end
  rescue
    puts $!
  ensure
    sleep sec
  end
end
